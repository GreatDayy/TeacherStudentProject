// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeacherStudentProject;

namespace TeacherStudentProject.Migrations
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20200922060853_changedNameOnSchoolRef")]
    partial class changedNameOnSchoolRef
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TeacherStudentProject.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolsId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("TeacherStudentProject.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("TeacherStudentProject.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolsId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("TeacherStudentProject.StudentCourses", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.HasKey("StudentID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("TeacherStudentProject.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolRefId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("TeacherStudentProject.TeacherCourses", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("TeacherCourses");
                });

            modelBuilder.Entity("TeacherStudentProject.Course", b =>
                {
                    b.HasOne("TeacherStudentProject.School", "Schools")
                        .WithMany("Courses")
                        .HasForeignKey("SchoolsId");
                });

            modelBuilder.Entity("TeacherStudentProject.Student", b =>
                {
                    b.HasOne("TeacherStudentProject.School", "Schools")
                        .WithMany("Students")
                        .HasForeignKey("SchoolsId");
                });

            modelBuilder.Entity("TeacherStudentProject.StudentCourses", b =>
                {
                    b.HasOne("TeacherStudentProject.Course", "Course")
                        .WithMany("studentCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeacherStudentProject.Student", "Student")
                        .WithMany("studentCourses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherStudentProject.Teacher", b =>
                {
                    b.HasOne("TeacherStudentProject.School", "Schools")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherStudentProject.TeacherCourses", b =>
                {
                    b.HasOne("TeacherStudentProject.Course", "Course")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeacherStudentProject.Teacher", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
